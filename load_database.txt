# Functionality imports
import numpy as np
import glob
import os, os.path
import pickle
from PIL import Image
from scipy import misc

# Data imports
from random import shuffle
import xml.etree.ElementTree

# Environment
max_image = -1
image_list = None
shuffler = None
training_datum_index = -1
max_category = -1 # return_batch sets it if called once

<<Other>>

def initialize_batches(f):
        global image_list, max_image, training_datum_index, shuffler
        image_list = glob.glob('*.jpg')
        max_image = len(image_list)
        training_datum_index = -1
        shuffler = [i for i in range(max_image+1)]
        shuffle(shuffler)

def normalize():
        # if file exists
        if "./mean_values.p".is_file():
            return pickle.load( open( "mean_values.p", "rb" ) )
        #
        else:
            batch = return_batch(max_image,"training",normalized=False)[0]
            mean_values = batch.mean(axis=(0,1,2))
            pickle.dump( mean_values, open( "mean_values.p", "wb" ) )
            return mean_values


'''def read_annotations(image_file): # This can be defined through the window
        transformed_xml_path = os.path.splitext("image_file")[0]+str(".xml")
        e = xml.etree.ElementTree.parse(transformed_xml_path).getroot()
        mytype = e.find('Type').text
        mycontent = e.find('Content').text

        if mytype != "NaturalBackground":
                continue

        category = -1

        if mycontent == "Leaf":
                category = 0
        if mycontent == "Flower":
                category = 1
        if mycontent == "Fruit":
                category = 2
        if mycontent == "Stem":
                category = 3
        if mycontent == "Entire":
                category = 4
        if category == -1:
                continue
        return category,5'''


def one_hot(category,max_labels): # category 0 - 4 for 5 labels
        y = np.zeros(max_labels)
        y[category] = 1
        return y

<<Replace_xml_parser>>

def return_batch(f,batch_size=32,origin="training",normalized=True,means=None):
        global training_datum_index, shuffler, image_list, max_categories

        max_image = max(glob.glob(f))
        # return <batch_size> number of examples from origin dataset
        datums = 0
        I = np.zeros([batch_size,<<imsize>>,<<imsize2>>,3])
        y = np.zeros([batch_size,5])

        while datums < batch_size:
                training_datum_index += 1
                if training_datum_index > max_image:
                        training_datum_index = 0
                shuffled_index = shuffler[training_datum_index]

                # try to open xml and jpeg, if success put it in datum and update to +1
                if (os.path.exists(image_list[shuffled_index])):
                        "proper image"

                        <<ReadDatafromannotations>>

                        datums += 1

        if means == None and normalized:
            means = normalize()

        if normalized:
            I = np.multiply(I - means,1/255.0)

        return I,y
